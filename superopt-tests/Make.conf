## Global paths

SHELL := /bin/bash

# our tools

SUPEROPT_DIR=$(SUPEROPT_PROJECT_DIR)/superopt
LLVM2TFG_SRC_DIR=$(SUPEROPT_PROJECT_DIR)/llvm
LLVM2TFG_BUILD_DIR=$(LLVM2TFG_SRC_DIR)-build

# compilers

CLANG_DIR ?= $(SUPEROPT_PROJECT_DIR)/llvm-project/build
MYLLVM_DIR ?= $(CLANG_DIR)
LLC=$(MYLLVM_DIR)/bin/llc
MYLLC=$(MYLLVM_DIR)/bin/llc
LLVM_OPT=$(MYLLVM_DIR)/bin/opt
LLVM_LINK=$(MYLLVM_DIR)/bin/llvm-link
LLVM_DIS=$(MYLLVM_DIR)/bin/llvm-dis
LLVM_AS=$(MYLLVM_DIR)/bin/llvm-as
MYLLVM_AS=$(MYLLVM_DIR)/bin/llvm-as
CLANG_I386=$(MYLLVM_DIR)/bin/clang -m32

GCC_I386=gcc-8 -m32
OBJDUMP=objdump

ICC_INSTALL_DIR ?= /opt/intel/system_studio_2018/
ICC_BIN_DIR      = $(ICC_INSTALL_DIR)/bin
ICC_I386         = $(ICC_BIN_DIR)/icc -m32 -mia32 -D_Float32=__Float32 -D_Float64=__Float64 -D_Float32x=__Float32x -D_Float64x=__Float64x
ICPC_I386        = $(ICC_BIN_DIR)/icpc -m32 -mia32

COMPCERT_INSTALL_BIN ?= /usr/local/bin
COMPCERT_INSTALL_LIB ?= /usr/local/lib/compcert
CCOMP_I386=$(COMPCERT_INSTALL_BIN)/ccomp -fvararg-calls -fno-fpu -funprototyped -fstruct-return -fno-tailcalls -L$(COMPCERT_INSTALL_LIB) $(EMIT_RELOCS_FLAG)

LINKER_SCRIPT_I386=$(SRCDIR)/misc/ld.script.i386

## Global compiler flags

LINKER_SCRIPT_I386_FLAG=-Wl,-T,$(LINKER_SCRIPT_I386)
DATA_SECTIONS_FLAG=-fdata-sections
EMIT_RELOCS_FLAG=-Wl,--emit-relocs
DEBUG_FLAG=-g

CFLAGS += $(DEBUG_FLAG)
CFLAGS += $(EMIT_RELOCS_FLAG)
CFLAGS += $(DATA_SECTIONS_FLAG)

CCOMP_CFLAGS += $(DEBUG_FLAG)

LLVM_OPT_FLAGS_O3 := -O3 -strip-debug
LLVM_OPT_FLAGS_O2 := -O2 -strip-debug

LIBS := -lm -lcrypt

## Common defines

NO_BUILTINS := -fno-builtin-printf -fno-builtin-malloc -fno-builtin-abort -fno-builtin-exit -fno-builtin-fscanf -fno-builtin-abs -fno-builtin-acos -fno-builtin-asin -fno-builtin-atan2 -fno-builtin-atan -fno-builtin-calloc -fno-builtin-ceil -fno-builtin-cosh -fno-builtin-cos -fno-builtin-exit -fno-builtin-exp -fno-builtin-fabs -fno-builtin-floor -fno-builtin-fmod -fno-builtin-fprintf -fno-builtin-fputs -fno-builtin-frexp -fno-builtin-fscanf -fno-builtin-isalnum -fno-builtin-isalpha -fno-builtin-iscntrl -fno-builtin-isdigit -fno-builtin-isgraph -fno-builtin-islower -fno-builtin-isprint -fno-builtin-ispunct -fno-builtin-isspace -fno-builtin-isupper -fno-builtin-isxdigit -fno-builtin-tolower -fno-builtin-toupper -fno-builtin-labs -fno-builtin-ldexp -fno-builtin-log10 -fno-builtin-log -fno-builtin-malloc -fno-builtin-memchr -fno-builtin-memcmp -fno-builtin-memcpy -fno-builtin-memset -fno-builtin-modf -fno-builtin-pow -fno-builtin-printf -fno-builtin-putchar -fno-builtin-puts -fno-builtin-scanf -fno-builtin-sinh -fno-builtin-sin -fno-builtin-snprintf -fno-builtin-sprintf -fno-builtin-sqrt -fno-builtin-sscanf -fno-builtin-strcat -fno-builtin-strchr -fno-builtin-strcmp -fno-builtin-strcpy -fno-builtin-strcspn -fno-builtin-strlen -fno-builtin-strncat -fno-builtin-strncmp -fno-builtin-strncpy -fno-builtin-strpbrk -fno-builtin-strrchr -fno-builtin-strspn -fno-builtin-strstr -fno-builtin-tanh -fno-builtin-tan -fno-builtin-vfprintf -fno-builtin-vsprintf -fno-builtin

DEFINES := -Dalloca=myalloca -D_FORTIFY_SOURCE=0 -D__noreturn__=__no_reorder__

VEC_FLAGS=-msse4.2

GCC_EQCHECKER_NOUNROLL_FLAGS=--param scev-max-expr-size=0 
CLANG_EQCHECKER_NOUNROLL_FLAGS=-fno-unroll-loops
ICC_EQCHECKER_NOUNROLL_FLAGS=-unroll0 -no-vec

GCC_NO_INLINING_FLAGS := -fno-inline -fno-inline-functions -fno-inline-small-functions -fno-indirect-inlining -fno-partial-inlining -fno-inline-functions-called-once -fno-early-inlining
CLANG_NO_INLINING_FLAGS := -fno-inline -fno-inline-functions
ICC_NO_INLINING_FLAGS := -nolib-inline -inline-level=0 -fno-inline-functions -finline-limit=0 -no-inline-calloc -no-inline-factor=0

GCC_NO_IPA_FLAGS := -fno-whole-program -fno-ipa-sra -fno-ipa-cp

GCC_I386_EQCHECKER_FLAGS_COMMON= -m32 -g -no-pie -fno-pie -fno-strict-overflow -fno-unit-at-a-time -fno-strict-aliasing -fno-optimize-sibling-calls -fno-stack-protector -fkeep-inline-functions -fwrapv -std=c11 -fno-reorder-blocks -fno-jump-tables -fno-zero-initialized-in-bss -fno-caller-saves $(GCC_NO_INLINING_FLAGS) $(GCC_NO_IPA_FLAGS) $(DEFINES) $(NO_BUILTINS) $(INCLUDES)
# clang generates jump tables for switch which we cannot handle; disabled using fno-jump-tables
CLANG_I386_EQCHECKER_FLAGS_COMMON= -m32 -g -std=c11 -fno-builtin -fno-stack-protector -fno-zero-initialized-in-bss -fno-strict-aliasing -fno-optimize-sibling-calls -fwrapv -fno-strict-overflow -ffreestanding -fno-jump-tables $(CLANG_NO_INLINING_FLAGS) $(DEFINES) $(INCLUDES)

ICC_I386_EQCHECKER_FLAGS_COMMON= -g -no-ip -fno-optimize-sibling-calls -fargument-alias -no-ansi-alias -falias -fno-jump-tables -fno-omit-frame-pointer -fno-strict-aliasing -fno-strict-overflow -fwrapv -fabi-version=1 $(ICC_NO_INLINING_FLAGS) $(NO_BUILTINS) $(DEFINES) -qno-opt-multi-version-aggressive -std=c11 -ffreestanding -U__GNUC__
